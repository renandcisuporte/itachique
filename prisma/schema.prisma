// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}



model User {
  id         String    @id @db.Char(36)
  name       String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("users")
}

model Category {
  id         String         @id @db.Char(36)
  name       String
  position   Int            @default(0)
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt
  deleted_at DateTime?
  categories CategoryPost[]

  @@map("categories")
}

model Locale {
  id         String    @id @db.Char(36)
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  posts Post[]

  @@map("locales")
}

model City {
  id         String    @id @db.Char(36)
  city       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  posts      Post[]

  @@map("cities")
}

model Post {
  id            String    @id @db.Char(36)
  locale_id     String?
  title         String
  date          DateTime?
  locale_text   String?   @db.Text
  city_id       String?
  cover_image   String?
  image_gallery String?   @db.Text
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  locale Locale? @relation(fields: [locale_id], references: [id], map: "locale_id", onDelete: Cascade, onUpdate: Cascade)
  city   City?   @relation(fields: [city_id], references: [id], map: "city_id", onDelete: Cascade, onUpdate: Cascade)

  categories CategoryPost[]

  @@index([city_id])
  @@index([locale_id])
  @@map("posts")
}

model CategoryPost {
  id          String @id @db.Char(36)
  category_id String
  post_id     String

  post     Post?     @relation(fields: [post_id], references: [id], map: "post_id", onDelete: Cascade, onUpdate: Cascade)
  category Category? @relation(fields: [category_id], references: [id], map: "category_id", onDelete: Cascade, onUpdate: Cascade)

  @@index([category_id])
  @@index([post_id])
  @@map("categories_posts")
}

model Advertisement {
  id         String    @id @db.Char(36)
  title      String
  image      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("advertisements")
}
